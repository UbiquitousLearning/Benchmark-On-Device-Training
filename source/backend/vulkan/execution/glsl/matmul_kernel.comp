#version 440 core
layout(std430) buffer;
layout(std430) uniform;
layout(set=0, binding=0) writeonly restrict mediump uniform image2D uOutput;
layout(set=0, binding=1) uniform sampler3D uInput;
layout(set=0, binding=2) uniform offsetBuffer {
    ivec4 offset; // Offset x, y, z
    ivec4 size;//w/4, h/4, w, w/4*h/4
} uOffset;
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    int posX = ivec3(gl_GlobalInvocationID).x;

    if (posX < uOffset.size.w)
    {
        ivec2 pos;
        pos.x = posX % uOffset.size.x;// L
        pos.y = posX / uOffset.size.x;// E / H
#ifdef TRANSPOSE
        vec4 c0 = texelFetch(uInput, ivec3(4 * pos.x + 0, 0, pos.y), 0);
        vec4 c1 = texelFetch(uInput, ivec3(4 * pos.x + 1, 0, pos.y), 0);
        vec4 c2 = texelFetch(uInput, ivec3(4 * pos.x + 2, 0, pos.y), 0);
        vec4 c3 = texelFetch(uInput, ivec3(4 * pos.x + 3, 0, pos.y), 0);
#else
        vec4 d0 = texelFetch(uInput, ivec3(4 * pos.y + 0, 0, pos.x), 0);
        vec4 d1 = texelFetch(uInput, ivec3(4 * pos.y + 1, 0, pos.x), 0);
        vec4 d2 = texelFetch(uInput, ivec3(4 * pos.y + 2, 0, pos.x), 0);
        vec4 d3 = texelFetch(uInput, ivec3(4 * pos.y + 3, 0, pos.x), 0);
        vec4 c0 = vec4(d0.x, d1.x, d2.x, d3.x);
        vec4 c1 = vec4(d0.y, d1.y, d2.y, d3.y);
        vec4 c2 = vec4(d0.z, d1.z, d2.z, d3.z);
        vec4 c3 = vec4(d0.w, d1.w, d2.w, d3.w);
#endif
        imageStore(uOutput, ivec2(4*pos.x+0, pos.y), c0);
        imageStore(uOutput, ivec2(4*pos.x+1, pos.y), c1);
        imageStore(uOutput, ivec2(4*pos.x+2, pos.y), c2);
        imageStore(uOutput, ivec2(4*pos.x+3, pos.y), c3);
    }
}
