#version 440 core
layout(std430) buffer;
layout(std430) uniform;
layout(set=0, binding=0) uniform mediump sampler3D uInput;

layout(set=0, binding=1) writeonly buffer destBuffer{
    float data[];
} uOutBuffer;

layout(set=0, binding=2) readonly uniform constBuffer{
    ivec4 info;
} uConstant;
layout(set=0, binding=3) readonly uniform offsetBuffer {
    ivec4 offset; // Offset x, y, z
    ivec4 size;//w, h, c, w*h*c
} uOffset;
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main()
{
    int posX = ivec3(gl_GlobalInvocationID).x;

    if (posX < uOffset.size.w)
    {
        ivec3 pos;
        pos.x = posX % uOffset.size.x;
        int tmp = posX / uOffset.size.x;
        pos.y = tmp % uOffset.size.y;
        pos.z = tmp / uOffset.size.y;
        vec4 color = texelFetch(uInput, pos, 0);
        pos = pos + uOffset.offset.xyz;
        int channelC4 = (uConstant.info.z + 3) / 4;
        int batchIndex = pos.z / channelC4;
        int zDiv4 = pos.z % channelC4;
        int lastZ = uConstant.info.z / 4;
        int cIndex = uConstant.info.z % 4;
        int imgHW = uConstant.info.y;
        int z = zDiv4*4;
        int basicOffset = 0
            + z*imgHW
            + uConstant.info.x*pos.y
            + imgHW*batchIndex*uConstant.info.z
            + uConstant.info.w*pos.x;
        
        if(zDiv4 == lastZ)
        {
            if(cIndex == 1)
            {
                uOutBuffer.data[basicOffset+0] = color.r;
            }
            else if(cIndex == 2)
            {
                uOutBuffer.data[basicOffset+0] = color.r;
                uOutBuffer.data[basicOffset+1*imgHW] = color.g;
            }
            else
            {
                uOutBuffer.data[basicOffset+0] = color.r;
                uOutBuffer.data[basicOffset+1*imgHW] = color.g;
                uOutBuffer.data[basicOffset+2*imgHW] = color.b;
            }
        }
        else
        {
            uOutBuffer.data[basicOffset+0] = color.r;
            uOutBuffer.data[basicOffset+1*imgHW] = color.g;
            uOutBuffer.data[basicOffset+2*imgHW] = color.b;
            uOutBuffer.data[basicOffset+3*imgHW] = color.a;
        }

    }
}
