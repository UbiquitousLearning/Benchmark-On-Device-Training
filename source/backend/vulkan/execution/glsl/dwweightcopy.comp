#version 440 core
layout(std430) uniform;

layout(set=0, binding=0) writeonly uniform image2D uOutput;
layout(set=0, binding=1) uniform sampler3D uInput;
layout(set=0, binding=2) readonly uniform constBuffer {
    ivec4 size; // kw, kh, c/4, kw*kh*c/4
} uConstant;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
#define UP_DIV(x, y) (((x)+(y)-1)/(y))

void main()
{
    ivec3 posTmp = ivec3(gl_GlobalInvocationID);
    if (posTmp.x < uConstant.size.w)
    {
        ivec3 pos;
        pos.x = posTmp.x % uConstant.size.x;
        int subIndex = posTmp.x / uConstant.size.x;
        pos.y = subIndex % uConstant.size.y;
        pos.z = subIndex / uConstant.size.y;
        vec4 c0 = texelFetch(uInput, ivec3(pos.x, pos.y, 4 * pos.z + 0), 0);
        vec4 c1 = texelFetch(uInput, ivec3(pos.x, pos.y, 4 * pos.z + 1), 0);
        vec4 c2 = texelFetch(uInput, ivec3(pos.x, pos.y, 4 * pos.z + 2), 0);
        vec4 c3 = texelFetch(uInput, ivec3(pos.x, pos.y, 4 * pos.z + 3), 0);
        imageStore(uOutput, ivec2(pos.y*uConstant.size.x+pos.x, pos.z), vec4(c0.x, c1.x, c2.x, c3.x));
    }
}
