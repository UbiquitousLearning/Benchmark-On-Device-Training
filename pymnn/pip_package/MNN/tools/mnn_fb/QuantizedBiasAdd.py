# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class QuantizedBiasAdd(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsQuantizedBiasAdd(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = QuantizedBiasAdd()
        x.Init(buf, n + offset)
        return x

    # QuantizedBiasAdd
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # QuantizedBiasAdd
    def Bias(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # QuantizedBiasAdd
    def BiasAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # QuantizedBiasAdd
    def BiasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # QuantizedBiasAdd
    def InputType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedBiasAdd
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedBiasAdd
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedBiasAdd
    def OutputType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def QuantizedBiasAddStart(builder): builder.StartObject(5)
def QuantizedBiasAddAddBias(builder, bias): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bias), 0)
def QuantizedBiasAddStartBiasVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def QuantizedBiasAddAddInputType(builder, inputType): builder.PrependInt32Slot(1, inputType, 0)
def QuantizedBiasAddAddMax(builder, max): builder.PrependInt32Slot(2, max, 0)
def QuantizedBiasAddAddMin(builder, min): builder.PrependInt32Slot(3, min, 0)
def QuantizedBiasAddAddOutputType(builder, outputType): builder.PrependInt32Slot(4, outputType, 0)
def QuantizedBiasAddEnd(builder): return builder.EndObject()
