# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class Eltwise(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEltwise(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Eltwise()
        x.Init(buf, n + offset)
        return x

    # Eltwise
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Eltwise
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Eltwise
    def Coeff(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Eltwise
    def CoeffAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Eltwise
    def CoeffLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def EltwiseStart(builder): builder.StartObject(2)
def EltwiseAddType(builder, type): builder.PrependInt8Slot(0, type, 0)
def EltwiseAddCoeff(builder, coeff): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(coeff), 0)
def EltwiseStartCoeffVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def EltwiseEnd(builder): return builder.EndObject()
