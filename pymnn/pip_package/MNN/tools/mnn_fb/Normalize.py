# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class Normalize(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNormalize(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Normalize()
        x.Init(buf, n + offset)
        return x

    # Normalize
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Normalize
    def AcrossSpatial(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Normalize
    def ChannelShared(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Normalize
    def Eps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Normalize
    def Scale(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Normalize
    def ScaleAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Normalize
    def ScaleLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def NormalizeStart(builder): builder.StartObject(4)
def NormalizeAddAcrossSpatial(builder, acrossSpatial): builder.PrependInt32Slot(0, acrossSpatial, 0)
def NormalizeAddChannelShared(builder, channelShared): builder.PrependInt32Slot(1, channelShared, 0)
def NormalizeAddEps(builder, eps): builder.PrependFloat32Slot(2, eps, 0.0)
def NormalizeAddScale(builder, scale): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scale), 0)
def NormalizeStartScaleVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NormalizeEnd(builder): return builder.EndObject()
