# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class LRN(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLRN(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LRN()
        x.Init(buf, n + offset)
        return x

    # LRN
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LRN
    def RegionType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LRN
    def LocalSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LRN
    def Alpha(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # LRN
    def Beta(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def LRNStart(builder): builder.StartObject(4)
def LRNAddRegionType(builder, regionType): builder.PrependInt32Slot(0, regionType, 0)
def LRNAddLocalSize(builder, localSize): builder.PrependInt32Slot(1, localSize, 0)
def LRNAddAlpha(builder, alpha): builder.PrependFloat32Slot(2, alpha, 0.0)
def LRNAddBeta(builder, beta): builder.PrependFloat32Slot(3, beta, 0.0)
def LRNEnd(builder): return builder.EndObject()
