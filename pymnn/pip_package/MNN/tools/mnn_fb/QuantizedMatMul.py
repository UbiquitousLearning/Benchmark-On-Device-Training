# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class QuantizedMatMul(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsQuantizedMatMul(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = QuantizedMatMul()
        x.Init(buf, n + offset)
        return x

    # QuantizedMatMul
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # QuantizedMatMul
    def TransposeA(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # QuantizedMatMul
    def TransposeB(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def QuantizedMatMulStart(builder): builder.StartObject(2)
def QuantizedMatMulAddTransposeA(builder, transposeA): builder.PrependBoolSlot(0, transposeA, 0)
def QuantizedMatMulAddTransposeB(builder, transposeB): builder.PrependBoolSlot(1, transposeB, 0)
def QuantizedMatMulEnd(builder): return builder.EndObject()
