# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class StridedSliceParam(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsStridedSliceParam(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StridedSliceParam()
        x.Init(buf, n + offset)
        return x

    # StridedSliceParam
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StridedSliceParam
    def Index(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def T(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def BeginMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def EndMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def EllipsisMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def NewAxisMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # StridedSliceParam
    def ShrinkAxisMask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def StridedSliceParamStart(builder): builder.StartObject(7)
def StridedSliceParamAddIndex(builder, Index): builder.PrependInt32Slot(0, Index, 0)
def StridedSliceParamAddT(builder, T): builder.PrependInt32Slot(1, T, 0)
def StridedSliceParamAddBeginMask(builder, beginMask): builder.PrependInt32Slot(2, beginMask, 0)
def StridedSliceParamAddEndMask(builder, endMask): builder.PrependInt32Slot(3, endMask, 0)
def StridedSliceParamAddEllipsisMask(builder, ellipsisMask): builder.PrependInt32Slot(4, ellipsisMask, 0)
def StridedSliceParamAddNewAxisMask(builder, newAxisMask): builder.PrependInt32Slot(5, newAxisMask, 0)
def StridedSliceParamAddShrinkAxisMask(builder, shrinkAxisMask): builder.PrependInt32Slot(6, shrinkAxisMask, 0)
def StridedSliceParamEnd(builder): return builder.EndObject()
