# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class Input(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInput(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Input()
        x.Init(buf, n + offset)
        return x

    # Input
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Input
    def Dims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Input
    def DimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Input
    def DimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Input
    def Dtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Input
    def Dformat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 2

def InputStart(builder): builder.StartObject(3)
def InputAddDims(builder, dims): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(dims), 0)
def InputStartDimsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InputAddDtype(builder, dtype): builder.PrependInt32Slot(1, dtype, 1)
def InputAddDformat(builder, dformat): builder.PrependInt8Slot(2, dformat, 2)
def InputEnd(builder): return builder.EndObject()
