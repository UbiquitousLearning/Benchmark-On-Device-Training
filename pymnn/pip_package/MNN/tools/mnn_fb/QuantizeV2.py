# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class QuantizeV2(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsQuantizeV2(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = QuantizeV2()
        x.Init(buf, n + offset)
        return x

    # QuantizeV2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # QuantizeV2
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizeV2
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # QuantizeV2
    def RoundMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def QuantizeV2Start(builder): builder.StartObject(3)
def QuantizeV2AddType(builder, type): builder.PrependInt32Slot(0, type, 0)
def QuantizeV2AddMode(builder, mode): builder.PrependInt8Slot(1, mode, 0)
def QuantizeV2AddRoundMode(builder, roundMode): builder.PrependInt8Slot(2, roundMode, 0)
def QuantizeV2End(builder): return builder.EndObject()
