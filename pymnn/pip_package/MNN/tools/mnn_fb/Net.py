# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class Net(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNet(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Net()
        x.Init(buf, n + offset)
        return x

    # Net
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Net
    def BizCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Net
    def ExtraTensorDescribe(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TensorDescribe import TensorDescribe
            obj = TensorDescribe()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Net
    def ExtraTensorDescribeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Net
    def Gpulibrary(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .GpuLibrary import GpuLibrary
            obj = GpuLibrary()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Net
    def Oplists(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Op import Op
            obj = Op()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Net
    def OplistsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Net
    def OutputName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Net
    def OutputNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Net
    def PreferForwardType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Net
    def SourceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Net
    def TensorName(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Net
    def TensorNameLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Net
    def TensorNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Net
    def Usage(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def NetStart(builder): builder.StartObject(10)
def NetAddBizCode(builder, bizCode): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bizCode), 0)
def NetAddExtraTensorDescribe(builder, extraTensorDescribe): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(extraTensorDescribe), 0)
def NetStartExtraTensorDescribeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NetAddGpulibrary(builder, gpulibrary): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gpulibrary), 0)
def NetAddOplists(builder, oplists): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(oplists), 0)
def NetStartOplistsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NetAddOutputName(builder, outputName): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(outputName), 0)
def NetStartOutputNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NetAddPreferForwardType(builder, preferForwardType): builder.PrependInt8Slot(5, preferForwardType, 0)
def NetAddSourceType(builder, sourceType): builder.PrependInt8Slot(6, sourceType, 0)
def NetAddTensorName(builder, tensorName): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(tensorName), 0)
def NetStartTensorNameVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NetAddTensorNumber(builder, tensorNumber): builder.PrependInt32Slot(8, tensorNumber, 0)
def NetAddUsage(builder, usage): builder.PrependInt8Slot(9, usage, 0)
def NetEnd(builder): return builder.EndObject()
