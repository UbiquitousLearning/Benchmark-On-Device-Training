# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class SpaceBatch(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSpaceBatch(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SpaceBatch()
        x.Init(buf, n + offset)
        return x

    # SpaceBatch
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SpaceBatch
    def BlockShape(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Blob import Blob
            obj = Blob()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SpaceBatch
    def Padding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Blob import Blob
            obj = Blob()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SpaceBatchStart(builder): builder.StartObject(2)
def SpaceBatchAddBlockShape(builder, blockShape): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(blockShape), 0)
def SpaceBatchAddPadding(builder, padding): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(padding), 0)
def SpaceBatchEnd(builder): return builder.EndObject()
