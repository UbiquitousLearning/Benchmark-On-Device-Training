# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class QuantizedAvgPool(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsQuantizedAvgPool(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = QuantizedAvgPool()
        x.Init(buf, n + offset)
        return x

    # QuantizedAvgPool
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # QuantizedAvgPool
    def KernelX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def KernelY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def ModelFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def OutputActivationMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def OutputActivationMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def PadType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def PadX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def PadY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def StrideX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def StrideY(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # QuantizedAvgPool
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def QuantizedAvgPoolStart(builder): builder.StartObject(11)
def QuantizedAvgPoolAddKernelX(builder, kernelX): builder.PrependInt32Slot(0, kernelX, 0)
def QuantizedAvgPoolAddKernelY(builder, kernelY): builder.PrependInt32Slot(1, kernelY, 0)
def QuantizedAvgPoolAddModelFormat(builder, modelFormat): builder.PrependInt8Slot(2, modelFormat, 0)
def QuantizedAvgPoolAddOutputActivationMax(builder, outputActivationMax): builder.PrependInt32Slot(3, outputActivationMax, 0)
def QuantizedAvgPoolAddOutputActivationMin(builder, outputActivationMin): builder.PrependInt32Slot(4, outputActivationMin, 0)
def QuantizedAvgPoolAddPadType(builder, padType): builder.PrependInt8Slot(5, padType, 0)
def QuantizedAvgPoolAddPadX(builder, padX): builder.PrependInt32Slot(6, padX, 0)
def QuantizedAvgPoolAddPadY(builder, padY): builder.PrependInt32Slot(7, padY, 0)
def QuantizedAvgPoolAddStrideX(builder, strideX): builder.PrependInt32Slot(8, strideX, 0)
def QuantizedAvgPoolAddStrideY(builder, strideY): builder.PrependInt32Slot(9, strideY, 0)
def QuantizedAvgPoolAddType(builder, type): builder.PrependInt32Slot(10, type, 0)
def QuantizedAvgPoolEnd(builder): return builder.EndObject()
