# automatically generated by the FlatBuffers compiler, do not modify

# namespace: MNN

import flatbuffers

class ExpandDims(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsExpandDims(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ExpandDims()
        x.Init(buf, n + offset)
        return x

    # ExpandDims
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ExpandDims
    def T(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ExpandDims
    def Tdim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ExpandDims
    def Axis(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ExpandDimsStart(builder): builder.StartObject(3)
def ExpandDimsAddT(builder, T): builder.PrependInt32Slot(0, T, 0)
def ExpandDimsAddTdim(builder, Tdim): builder.PrependInt32Slot(1, Tdim, 0)
def ExpandDimsAddAxis(builder, axis): builder.PrependInt32Slot(2, axis, 0)
def ExpandDimsEnd(builder): return builder.EndObject()
